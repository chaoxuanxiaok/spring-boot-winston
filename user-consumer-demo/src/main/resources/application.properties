server.port=8082
# 指定应用名称，后续会作为应用的id来使用
spring.application.name=user-consumer-demo
########################################### 在注册中心订阅服务
#   是否注册该应用信息到EurekaServer，默认是true，所以省略
#   eureka.client.register-with-eureka=true
#   是否拉取其他服务信息，默认是true，所以省略
#   eureka.client.fetch-registry=true

#-----------
#   !!!!注意区别于eureka.client.service-url.defaultZone
#       eureka.client.service-url.”指定服务注册中心地址，类型为 HashMap，
#       并设置有一组默认值，默认的Key为 defaultZone；默认的Value为http://localhost:8761/eureka
#       如果服务注册中心加入了安全验证，地址格式为  http://<username>:<password>@localhost:8761/eureka
#-----------
# 配置注册中心地址，如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔
eureka.client.serviceUrl.defaultZone=http://127.0.0.1:10087/eureka,http://127.0.0.1:10088/eureka
# 当调用getHostName获取实例的hostname时，返回ip而不是host名称
eureka.instance.prefer-ip-address=true
# 指定自己的ip信息，若不指定会自动寻找
eureka.instance.ip-address=127.0.0.1
# 消费方从Eureka Server服务的列表备份缓存在本地，每隔5秒重新获取并更新数据，默认30秒
eureka.client.registry-fetch-interval-seconds=5

######################################### 更改ribbon的负载均衡策略，默认是轮询，改为随机
# 格式为  {服务名称}.ribbon.NFLoadBalancerRuleClassName=全类名
# user-service-demo.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule

#########################################  增强RestTemplate的重试能力--通过ribbon实现
# 开启Spring Cloud的重试功能
spring.cloud.loadbalancer.retry.enabled=true
# Ribbon的连接超时时间
user-service-demo.ribbon.ConnectTimeout=250
# Ribbon的数据读取超时时间   Ribbon的超时时间一定要小于Hystrix的超时时间，否则会先触发熔断，重试机制不会触发
user-service-demo.ribbon.ReadTimeout=1000
# 是否对所有操作都进行重试
user-service-demo.ribbon.OkToRetryOnAllOperations=true
# 切换实例的重试次数，这个不行就下个，如果这里设定的次数用完了，就返回失败
user-service-demo.ribbon.MaxAutoRetriesNextServer=1
# 对当前实例的重试次数
user-service-demo.ribbon.MaxAutoRetries=1

################设置Hystrix的超时时间,单位是毫秒，需要大于ribbon的超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMillisecond=6000

######################################Feign集成了Ribbon和Hystrix的功能#########################
# 像上面一样，服务名.ribbon.xxx 配置超时时间等参数
# Hystrix默认关闭，需要开启
feign.hystrix.enabled=true
# 定义应用的 日志级别，对Feign客户端无效，feign需要在配置类中额外指定日志级别
logging.level.com.winston.userconsumer=info
# 对请求和响应进行GZIP压缩，减少通信过程中的性能损耗
feign.compression.request.enabled=true
feign.compression.response.enabled=true
# 对请求的数据类型进行设置,以下是默认的
feign.compression.request.mime-types=text/html,application/xml,application/json
# 对请求触发压缩的大小下限进行设置
feign.compression.request.min-request-size=2048
